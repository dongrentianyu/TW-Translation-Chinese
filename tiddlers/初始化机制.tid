created: 20230714142959752
creator: 马不前
modified: 20230714144913826
modifier: 马不前
original-title: BootMechanism
tags: Mechanisms
title: 初始化机制

!介绍

TiddlyWiki5 的核心是一个相对较小的启动内核，它可以在 Node.js 环境下或在浏览器中运行，所有其他功能通过动态加载的模块添加。

内核仅引导了足够的TiddlyWiki环境，使其能够加载和执行模块条目。模块系统与CommonJS和`Node.js`兼容。

有许多不同类型的模块：[[解析器]]、[[反序列化]]、[[微件]]等等。它远远超出了你的预期。例如，单个条目字段也是模块：有一个模块知道如何处理`tags`字段，另一个模块知道如何处理`modified`和`created`字段的特殊行为。一些插件模块还有进一步的子插件：例如，wikitext 解析器接受作为单独的插件模块的解析规则。

!插件

在 TiddlyWiki5 中，插件是以一种捆绑形式分发和管理的条目集合；[[模块|模块系统]]是带有`module`类型的 JavaScript条目，用于标识何时以及如何执行它们。

条目[[$:/boot/boot.js]]是一个简化的 TiddlyWiki内核，仅足够加载核心插件模块并触发启动模块以加载其余的应用程序。

启动内核包括：

* 几个简短的共享实用函数
* 一些实现模块机制的方法
* `$tw.Tiddler` 类（以及字段定义插件）
* `$tw.Wiki` 类（以及条目反序列化方法）
* 浏览器加载来自 HTML DOM 的条目的代码
* 服务器加载来自文件系统的条目的代码

每个模块都是一个普通的 CommonJS 模块，使用 `require()` 函数来访问其他模块，并使用 `exports` 全局对象来返回 JavaScript 值。启动内核消除了 `Node.js` 和浏览器之间的差异，使得相同的插件模块可以在两个环境中执行。

在浏览器中，`core/boot.js` 被打包到一个模板 HTML 文件中，该文件按照以下顺序包含以下元素：

* 普通和系统条目，以 HTML `<DIV>` 元素的形式进行打包
* `core/bootprefix.js`，包含几行代码来设置插件环境
* 可选的 JavaScript 模块，以 HTML `<SCRIPT>` 块的形式进行打包
* `core/boot.js`，包含启动内核的代码

在服务器端，`core/boot.js`被直接执行。它使用 `Node.js`的本地文件 API 直接从文件系统中的 `core/modules` 目录加载插件。出于简洁起见（以及因为在插件加载完成之前系统本质上是阻塞的），代码加载是同步进行的。

启动过程设置了`$tw`全局变量，用于存储系统的所有状态数据。

在启动过程的最后，启动机制安排执行启动模块，以启动剩下的TiddlyWiki部分。