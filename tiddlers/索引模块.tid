created: 20230713083251813
creator: 马不前
modified: 20230713084255763
modifier: 马不前
original-title: indexer modules
tags: moduletypes dev
title: 索引模块

索引器模块维护条目的索引，这种方式对于不同类型的访问更有效，通常是为了加速某些筛选操作。标签索引器就是一个例子，维护一个查找表，列出哪些条目有给定的标签，要比遍历维基中的//所有//条目，并逐个访问它们是否有你感兴趣的标签要快得多！

索引器模块的`module-type`是`indexer`，TiddlyWiki包含的索引器可以在`core/modules/indexers`下找到。

! 方法

索引模块必须导出一个构造函数，该函数将当前的维基对象作为其唯一的参数。 由构造函数构建的对象必须实现以下方法：

!! `init()`

执行索引器所需的任何初始设置。

!! `rebuild()`

这将从头开始重建索引，通常是在维基发生了大量更改之后。

!! `update(updateDescriptor)`

每当添加、更改或删除一个条目时就会调用这个方法。`updateDescriptor`是一个包含两个字段的对象，`old`和`new`，分别表示更新前和更新后的 条目状态。每个字段都有三个自己的子字段：

* `tiddler` - Tiddler 条目的状态（可能为 `null`）
* `shadow` - 一个布尔值，指示该条目是否为影子条目
* `exists` - 一个布尔值，指示该条目是否存在

例如，假设你有一个名为`idx`的索引器，并创建了一个文本为"test"的条目 - 这将导致你的索引器的 `update`方法被如下调用：

```javascript
idx.update({
  old: { tiddler: null, shadow: false, exists: false },
  new: { tiddler: new $tw.Tiddler({title: 'T', text: 'test'}), shadow: false, exists: true }
});
```

如果将文本从"test"改为"testing"，`update`将被这样调用：

```javascript
idx.update({
  old: { tiddler: new $tw.Tiddler({title: 'T', text: 'test'}), shadow: false, exists: true },
  new: { tiddler: new $tw.Tiddler({title: 'T', text: 'testing'}), shadow: false, exists: true }
});
```

最后，如果删除T，`update`将被这样调用：

```javascript
idx.update({
  old: { tiddler: new $tw.Tiddler({title: 'T', text: 'testing'}), shadow: false, exists: true },
  new: { tiddler: null, shadow: false, exists: false }
});
```